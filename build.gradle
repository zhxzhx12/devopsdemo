/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */


 buildscript {

     repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }

    ext { springBootVersion = '1.5.7.RELEASE' }
    
}


// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps-maven'
apply plugin: 'war'

jar {
    baseName = 'test-gradle-web-content'
    version =  '0.1.0'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


tasks.withType(JavaCompile) { options.encoding = "UTF-8" }


dependencies {


    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'


    compile("org.springframework.boot:spring-boot-starter-web"){
    	exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-devtools")
    optional("org.springframework.boot:spring-boot-devtools")

}

task copyJar {
    doLast {
        copy {
            from 'build/libs'
            into 'build/resources/main/dockerfile'
            include '*.jar'
        }
    }
}
